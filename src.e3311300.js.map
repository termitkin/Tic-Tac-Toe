{"version":3,"sources":["state.js","getEmptyCells.js","botMakeMove.js","defineWinner.js","bot.js","refreshScores.js","resetField.js","index.js"],"names":["state","fieldCells","document","querySelectorAll","gamerScore","querySelector","botScore","refresh","again","message","winnerCombinations","winner","botThinking","getEmptyCells","emptyCells","forEach","el","ind","innerHTML","push","botMakeMove","moveMaked","botCanWin","playerCanWin","i","length","randomCellIndex","Math","round","random","some","defineWinner","every","elem","currentScore","Number","localStorage","getItem","setItem","bot","randomThinkingTime","setTimeout","refreshScores","location","reload","resetField","firstMove","makeMove","e","target","addEventListener"],"mappings":"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","file":"src.e3311300.js","sourceRoot":"..\\src","sourcesContent":["export const state = {\r\n  fieldCells: [...document.querySelectorAll(\".field__cell\")],\r\n  gamerScore: document.querySelector(\".gamer__score\"),\r\n  botScore: document.querySelector(\".bot__score\"),\r\n  refresh: document.querySelector(\"#refresh_JS\"),\r\n  again: document.querySelector(\"#again_JS\"),\r\n  message: document.querySelector(\"#message_JS\"),\r\n  winnerCombinations: [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ],\r\n  winner: false,\r\n  botThinking: false\r\n};\r\n","import { state } from \"./state\";\r\n\r\nexport const getEmptyCells = () => {\r\n  const emptyCells = [];\r\n  state.fieldCells.forEach((el, ind) => {\r\n    if (el.innerHTML === \"\") {\r\n      emptyCells.push(ind);\r\n    }\r\n  });\r\n  return emptyCells;\r\n};\r\n","import { getEmptyCells } from \"./getEmptyCells\";\r\nimport { state } from \"./state\";\r\n\r\nexport const botMakeMove = () => {\r\n  let moveMaked = 0;\r\n  const botCanWin = [];\r\n  const playerCanWin = [];\r\n\r\n  for (let i = 0; i < state.winnerCombinations.length; i += 1) {\r\n    if (\r\n      state.fieldCells[state.winnerCombinations[i][0]].innerHTML === \"O\" &&\r\n      state.fieldCells[state.winnerCombinations[i][1]].innerHTML === \"O\" &&\r\n      state.fieldCells[state.winnerCombinations[i][2]].innerHTML === \"\"\r\n    ) {\r\n      botCanWin.push([i, 2]);\r\n      break;\r\n    } else if (\r\n      state.fieldCells[state.winnerCombinations[i][0]].innerHTML === \"O\" &&\r\n      state.fieldCells[state.winnerCombinations[i][2]].innerHTML === \"O\" &&\r\n      state.fieldCells[state.winnerCombinations[i][1]].innerHTML === \"\"\r\n    ) {\r\n      botCanWin.push([i, 1]);\r\n      break;\r\n    } else if (\r\n      state.fieldCells[state.winnerCombinations[i][1]].innerHTML === \"O\" &&\r\n      state.fieldCells[state.winnerCombinations[i][2]].innerHTML === \"O\" &&\r\n      state.fieldCells[state.winnerCombinations[i][0]].innerHTML === \"\"\r\n    ) {\r\n      botCanWin.push([i, 0]);\r\n      break;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < state.winnerCombinations.length; i += 1) {\r\n    if (\r\n      state.fieldCells[state.winnerCombinations[i][0]].innerHTML === \"X\" &&\r\n      state.fieldCells[state.winnerCombinations[i][1]].innerHTML === \"X\" &&\r\n      state.fieldCells[state.winnerCombinations[i][2]].innerHTML === \"\"\r\n    ) {\r\n      playerCanWin.push([i, 2]);\r\n      break;\r\n    } else if (\r\n      state.fieldCells[state.winnerCombinations[i][0]].innerHTML === \"X\" &&\r\n      state.fieldCells[state.winnerCombinations[i][2]].innerHTML === \"X\" &&\r\n      state.fieldCells[state.winnerCombinations[i][1]].innerHTML === \"\"\r\n    ) {\r\n      playerCanWin.push([i, 1]);\r\n      break;\r\n    } else if (\r\n      state.fieldCells[state.winnerCombinations[i][1]].innerHTML === \"X\" &&\r\n      state.fieldCells[state.winnerCombinations[i][2]].innerHTML === \"X\" &&\r\n      state.fieldCells[state.winnerCombinations[i][0]].innerHTML === \"\"\r\n    ) {\r\n      playerCanWin.push([i, 0]);\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (botCanWin.length > 0) {\r\n    state.fieldCells[\r\n      state.winnerCombinations[botCanWin[0][0]][botCanWin[0][1]]\r\n    ].innerHTML = \"O\";\r\n    moveMaked = 1;\r\n  } else if (playerCanWin.length > 0) {\r\n    state.fieldCells[\r\n      state.winnerCombinations[playerCanWin[0][0]][playerCanWin[0][1]]\r\n    ].innerHTML = \"O\";\r\n    moveMaked = 1;\r\n  }\r\n\r\n  if (moveMaked === 0) {\r\n    const randomCellIndex = Math.round(Math.random() * 8);\r\n\r\n    if (getEmptyCells().some(el => el === randomCellIndex)) {\r\n      state.fieldCells[randomCellIndex].innerHTML = \"O\";\r\n    } else if (getEmptyCells().length > 0) {\r\n      botMakeMove();\r\n    }\r\n  }\r\n};\r\n","import { state } from \"./state\";\r\n\r\nexport const defineWinner = () => {\r\n  state.winnerCombinations.forEach(el => {\r\n    if (\r\n      el.every(\r\n        elem =>\r\n          state.fieldCells[elem].innerHTML !== \"\" &&\r\n          state.fieldCells[elem].innerHTML === \"X\"\r\n      )\r\n    ) {\r\n      state.winner = true;\r\n      state.message.innerHTML = \"YOU win this round\";\r\n      const currentScore = Number(localStorage.getItem(\"gamerScore\")) + 1;\r\n      localStorage.setItem(\"gamerScore\", currentScore);\r\n      state.gamerScore.innerHTML = localStorage.getItem(\"gamerScore\");\r\n    } else if (\r\n      el.every(\r\n        elem =>\r\n          state.fieldCells[elem].innerHTML !== \"\" &&\r\n          state.fieldCells[elem].innerHTML === \"O\"\r\n      )\r\n    ) {\r\n      state.winner = true;\r\n      state.message.innerHTML = \"BOT win this round\";\r\n      const currentScore = Number(localStorage.getItem(\"botScore\")) + 1;\r\n      localStorage.setItem(\"botScore\", currentScore);\r\n      state.botScore.innerHTML = localStorage.getItem(\"botScore\");\r\n    }\r\n  });\r\n\r\n  if (\r\n    state.winner === false &&\r\n    state.fieldCells.every(el => el.innerHTML !== \"\")\r\n  ) {\r\n    state.winner = true;\r\n    state.message.innerHTML = \"this round is a DRAW\";\r\n  } else if (state.winner === false) {\r\n    state.message.innerHTML = \"Your turn!\";\r\n  }\r\n};\r\n","import { getEmptyCells } from \"./getEmptyCells\";\r\nimport { botMakeMove } from \"./botMakeMove\";\r\nimport { defineWinner } from \"./defineWinner\";\r\nimport { state } from \"./state\";\r\n\r\nexport const bot = () => {\r\n  state.message.innerHTML = \"Bot is thinking..\";\r\n  if (getEmptyCells().length > 1 && state.winner === false) {\r\n    const randomThinkingTime = Math.round(Math.random() * 2000);\r\n    state.botThinking = true;\r\n    setTimeout(() => {\r\n      botMakeMove();\r\n      defineWinner();\r\n      state.botThinking = false;\r\n    }, randomThinkingTime);\r\n  } else {\r\n    botMakeMove();\r\n    defineWinner();\r\n  }\r\n};\r\n","export const refreshScores = () => {\r\n  localStorage.setItem(\"gamerScore\", 0);\r\n  localStorage.setItem(\"botScore\", 0);\r\n  location.reload();\r\n};\r\n","export const resetField = () => {\r\n  location.reload();\r\n};\r\n","import { bot } from \"./bot\";\r\nimport { defineWinner } from \"./defineWinner\";\r\nimport { refreshScores } from \"./refreshScores\";\r\nimport { resetField } from \"./resetField\";\r\nimport { state } from \"./state\";\r\n\r\n(function() {\r\n  if (localStorage.length > 0) {\r\n    state.gamerScore.innerHTML = localStorage.getItem(\"gamerScore\");\r\n    state.botScore.innerHTML = localStorage.getItem(\"botScore\");\r\n  } else {\r\n    localStorage.setItem(\"gamerScore\", 0);\r\n    localStorage.setItem(\"botScore\", 0);\r\n  }\r\n})();\r\n\r\nconst firstMove = Math.round(Math.random());\r\nif (firstMove > 0) {\r\n  bot();\r\n} else {\r\n  state.message.innerHTML = \"Your turn!\";\r\n}\r\n\r\nconst makeMove = e => {\r\n  if (\r\n    e.target.innerHTML === \"\" &&\r\n    state.winner === false &&\r\n    state.botThinking === false\r\n  ) {\r\n    e.target.innerHTML = \"X\";\r\n\r\n    defineWinner();\r\n\r\n    if (state.winner === false) {\r\n      bot();\r\n    }\r\n  }\r\n};\r\n\r\nstate.refresh.addEventListener(\"click\", refreshScores);\r\nstate.again.addEventListener(\"click\", resetField);\r\nstate.fieldCells.forEach(el => {\r\n  el.addEventListener(\"click\", makeMove);\r\n});\r\n"]}